name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      # Define service URLs
      MATH_SERVICE_URL: http://math-service:4001
      HISTORY_SERVICE_URL: http://history-service:4002
      GEOGRAPHY_SERVICE_URL: http://geography-service:4003

    steps:
    # 1Ô∏è‚É£ Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2Ô∏è‚É£ Debug absolute paths
    - name: Debug Absolute Paths
      run: |
        echo "GitHub workspace: $GITHUB_WORKSPACE"
        echo "Listing all files in the workspace directory:"
        ls -R $GITHUB_WORKSPACE
        echo "Finding all directories in the workspace:"
        find $GITHUB_WORKSPACE -type d

    # 3Ô∏è‚É£ Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    # 4Ô∏è‚É£ Install dependencies (use absolute paths)
    - name: Install dependencies
      run: |
        cd $GITHUB_WORKSPACE/frontend && rm -rf node_modules package-lock.json && npm install
        cd $GITHUB_WORKSPACE/services/api-gateway && rm -rf node_modules package-lock.json && npm install
        cd $GITHUB_WORKSPACE/services/math-service && rm -rf node_modules package-lock.json && npm install
        cd $GITHUB_WORKSPACE/services/history-service && rm -rf node_modules package-lock.json && npm install
        cd $GITHUB_WORKSPACE/services/geography-service && rm -rf node_modules package-lock.json && npm install

    # 5Ô∏è‚É£ Verify Jest is installed
    - name: Verify Jest Installation
      run: |
        cd $GITHUB_WORKSPACE/frontend && npx jest --version || echo "Jest not installed in frontend!"
        cd $GITHUB_WORKSPACE/services/api-gateway && npx jest --version || echo "Jest not installed in API Gateway!"

    # 6Ô∏è‚É£ Run Jest Tests
    - name: Run Jest Tests
      run: |
        cd $GITHUB_WORKSPACE/frontend && npx jest
        cd $GITHUB_WORKSPACE/services/api-gateway && npx jest

    # 7Ô∏è‚É£ Log in to Docker Hub (or another registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 8Ô∏è‚É£ Build Docker images
    - name: Build Docker Images
      run: |
        docker build -t your-username/math-service:latest $GITHUB_WORKSPACE/services/math-service
        docker build -t your-username/history-service:latest $GITHUB_WORKSPACE/services/history-service
        docker build -t your-username/geography-service:latest $GITHUB_WORKSPACE/services/geography-service
        docker build -t your-username/api-gateway:latest $GITHUB_WORKSPACE/services/api-gateway
        docker build -t your-username/frontend:latest $GITHUB_WORKSPACE/frontend

    # 9Ô∏è‚É£ Push Docker images to the registry
    - name: Push Docker Images
      run: |
        docker push your-username/math-service:latest
        docker push your-username/history-service:latest
        docker push your-username/geography-service:latest
        docker push your-username/api-gateway:latest
        docker push your-username/frontend:latest

    # üîü Deploy to Docker Swarm
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SWARM_MANAGER_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull your-username/math-service:latest
          docker pull your-username/history-service:latest
          docker pull your-username/geography-service:latest
          docker pull your-username/api-gateway:latest
          docker pull your-username/frontend:latest
          docker stack deploy -c docker-stack.yml my-stack
